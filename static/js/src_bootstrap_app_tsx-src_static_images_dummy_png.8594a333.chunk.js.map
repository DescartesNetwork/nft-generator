{"version":3,"file":"static/js/src_bootstrap_app_tsx-src_static_images_dummy_png.8594a333.chunk.js","mappings":"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","sources":["static.app.tsx","model/nftSetup.controller.ts","configs/manifest.config.ts","configs/sol.config.ts","configs/index.ts","constant/index.ts","helper/index.ts","action/genNFT/nftContent/infomationStep.tsx","action/genNFT/nftContent/metadataStep.tsx","lib/walletMetaplexAdapter.ts","lib/metaplex.ts","hooks/useMetaplex.ts","action/genNFT/nftContent/properties.tsx","hooks/actions/useGenNFT.ts","action/genNFT/nftContent/index.tsx","action/genNFT/index.tsx","model/main.controller.ts","hooks/useAppRouter.ts","component/layout.tsx","component/loading/index.tsx","component/nftCard.tsx","view/nft/index.tsx","hooks/actions/useGenSplToken.ts","action/genSPLToken/splContent.tsx","action/genSPLToken/index.tsx","hooks/useSPLToken.ts","component/iconFT.tsx","component/nameFT.tsx","component/splCard.tsx","view/splToken/index.tsx","view/nft/updateNFT.tsx","view/index.tsx","model/devTools.ts","model/nfts.controller.tsx","model/spl.controller.ts","model/index.ts","bootstrap.app.tsx"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"logo\", {\n  enumerable: true,\n  get: function () {\n    return _logo.default;\n  }\n});\nexports.panels = void 0;\nObject.defineProperty(exports, \"readme\", {\n  enumerable: true,\n  get: function () {\n    return _README.default;\n  }\n});\n\nvar _panel = _interopRequireDefault(require(\"./static/images/panel.png\"));\n\nvar _logo = _interopRequireDefault(require(\"./static/images/logo.png\"));\n\nvar _README = _interopRequireDefault(require(\"./static/docs/README.md\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst panels = [_panel.default];\nexports.panels = panels;","import { MetaplexFile } from '@metaplex-foundation/js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type CollectionInfo = {\n  name?: string\n  family?: string\n  [key: string]: unknown\n}\n\nexport type Attributes = Array<{\n  trait_type?: string\n  value?: string\n  [key: string]: unknown\n}>\n\nexport type Files = Array<{\n  type?: string\n  uri?: string\n  [key: string]: unknown\n}>\n\nexport type Creator = Array<{\n  address: string\n  share: number\n  [key: string]: unknown\n}>\n\nexport type NftSetupState = {\n  currentStep: number\n  name: string\n  sellerFeeBasisPoints: number\n  image?: MetaplexFile\n  collectionInfo: CollectionInfo\n  isCollection: boolean\n  symbol: string\n  externalUrl: string\n  description: string\n  attributes: Attributes\n  creators: Creator\n  files: Files\n  displayedImage: string | ArrayBuffer | null\n  hasImageLink: boolean\n  imageLink: string\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: NftSetupState = {\n  name: '',\n  sellerFeeBasisPoints: 0,\n  collectionInfo: {},\n  isCollection: false,\n  currentStep: 0,\n  symbol: '',\n  externalUrl: '',\n  description: '',\n  attributes: [],\n  creators: [],\n  files: [],\n  displayedImage: '',\n  hasImageLink: false,\n  imageLink: '',\n}\n\n/**\n * Actions\n */\nexport const setCurrentStep = createAsyncThunk(\n  `${NAME}/setCurrentStep`,\n  async (currentStep: number) => {\n    return { currentStep }\n  },\n)\n\nexport const setName = createAsyncThunk(\n  `${NAME}/setName`,\n  async (name: string) => {\n    return { name }\n  },\n)\n\nexport const setSellerFeeBasisPoints = createAsyncThunk(\n  `${NAME}/setSellerFeeBasisPoints`,\n  async (sellerFeeBasisPoints: number) => {\n    return { sellerFeeBasisPoints }\n  },\n)\n\nexport const setImage = createAsyncThunk(\n  `${NAME}/setImage`,\n  async (image: MetaplexFile | string) => {\n    return { image }\n  },\n)\n\nexport const setCollectionInfo = createAsyncThunk(\n  `${NAME}/setCollectionInfo`,\n  async (collectionInfo: CollectionInfo) => {\n    return { collectionInfo }\n  },\n)\n\nexport const setIsCollection = createAsyncThunk(\n  `${NAME}/setIsCollection`,\n  async (isCollection: boolean) => {\n    return { isCollection }\n  },\n)\n\nexport const setSymbol = createAsyncThunk(\n  `${NAME}/setSymbol`,\n  async (symbol: string) => {\n    return { symbol }\n  },\n)\n\nexport const setExternalUrl = createAsyncThunk(\n  `${NAME}/setExternalUrl`,\n  async (externalUrl: string) => {\n    return { externalUrl }\n  },\n)\n\nexport const setDescription = createAsyncThunk(\n  `${NAME}/setDescription`,\n  async (description: string) => {\n    return { description }\n  },\n)\n\nexport const setAttributes = createAsyncThunk(\n  `${NAME}/setAttributes`,\n  async (attributes: Attributes) => {\n    return { attributes }\n  },\n)\n\nexport const setCreators = createAsyncThunk(\n  `${NAME}/setCreators`,\n  async (creators: Creator) => {\n    return { creators }\n  },\n)\n\nexport const setFiles = createAsyncThunk(\n  `${NAME}/setFiles`,\n  async (files: Files) => {\n    return { files }\n  },\n)\n\nexport const setDisplayedImage = createAsyncThunk(\n  `${NAME}/setDisplayedImage`,\n  async (displayedImage: string | ArrayBuffer | null) => {\n    return { displayedImage }\n  },\n)\n\nexport const setHasImageLink = createAsyncThunk(\n  `${NAME}/setHasImageLink`,\n  async (hasImageLink: boolean) => {\n    return { hasImageLink }\n  },\n)\n\nexport const setImageLink = createAsyncThunk(\n  `${NAME}/setImageLink`,\n  async (imageLink: string) => {\n    return { imageLink }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setName.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setSellerFeeBasisPoints.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setImage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setCollectionInfo.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setIsCollection.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setCurrentStep.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setSymbol.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setExternalUrl.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDescription.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setAttributes.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setCreators.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setFiles.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisplayedImage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setHasImageLink.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setImageLink.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Env } from '@sentre/senhub'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net, rpc } from '@sentre/senhub'\nimport { Connection } from '@solana/web3.js'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  connection: Connection\n  bundlrConfig?: {\n    address: string\n    providerUrl: string\n    timeout: number\n  }\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    connection: new Connection(rpc),\n    bundlrConfig: {\n      address: 'https://devnet.bundlr.network',\n      providerUrl: 'https://api.devnet.solana.com',\n      timeout: 60000,\n    },\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    connection: new Connection(rpc),\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    connection: new Connection(rpc),\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from '@sentre/senhub'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { PublicKey } from '@solana/web3.js'\n\nexport const HOME_TAB: Record<string, string> = {\n  NFT: 'nft',\n  TOKEN: 'token',\n}\n\nexport const PROJECT_PUBLIC_KEY = new PublicKey(\n  'DBHmm6zJP13cuVepfFwp8mXtNRATTsk4miZHWDZSg4Vv',\n)\n\nexport enum NFTCreatingStep {\n  information,\n  metadata,\n  properties,\n}\n\nexport type MetaplexMethod =\n  | 'findAllByCreator'\n  | 'createNFT'\n  | 'findAllByMintList'\n  | 'findAllNftsByOwner'\n  | 'findByMint'\n  | 'getCost'\n  | 'load'\n  | 'printNewEdition'\n  | 'uploadFile'\n  | 'uploadMetadata'\n\nexport const TOKEN_PROGRAM = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n\nexport enum FileType {\n  Png = 'png',\n  Jpg = 'jpg',\n  Gif = 'gif',\n  Jpeg = 'jpeg',\n}\n","import { DataLoader, util } from '@sentre/senhub'\nimport { Cluster, PublicKey } from '@solana/web3.js'\nimport { message } from 'antd'\nimport { RcFile } from 'antd/lib/upload/interface'\n\nimport configs from 'configs'\nimport { TOKEN_PROGRAM } from 'constant'\n\nconst {\n  sol: { connection },\n} = configs\n\nexport const clusterAdapter = (net: string): Cluster => {\n  if (net === 'devnet') return 'devnet'\n  if (net === 'testnet') return 'testnet'\n  return 'mainnet-beta'\n}\n\nexport const notifySuccess = (content: string, txId: string) => {\n  return window.notify({\n    type: 'success',\n    description: `${content} successfully. Click to view details.`,\n    onClick: () => window.open(util.explorer(txId), '_blank'),\n  })\n}\n\nexport const notifyError = (er: any) => {\n  console.log('er', er)\n  return window.notify({\n    type: 'error',\n    description: er.message,\n  })\n}\n\nexport const fileToBase64 = (\n  file: File,\n  callBack: (result: string | ArrayBuffer | null) => void,\n) => {\n  const reader = new FileReader()\n  reader.readAsDataURL(file)\n  reader.onload = async () => {\n    if (reader.result) callBack(reader.result)\n  }\n}\n\nexport const beforeUpload = (file: RcFile) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!')\n  }\n  return isJpgOrPng && isLt2M\n}\n\nexport const fetchMetadata = async (url: string) => {\n  return DataLoader.load('fetchMetadata' + url, () =>\n    fetch(url).then((val) => val.json()),\n  )\n}\n\nexport const getParsedTokensbyUser = async ({\n  publicAddress,\n  limit = 5000,\n}: {\n  publicAddress: string\n  limit?: number\n}) => {\n  // Get all accounts owned by user\n  // and created by SPL Token Program\n  // this will include all NFTs, Coins, Tokens, etc.\n  const { value: splAccounts } = await connection.getParsedTokenAccountsByOwner(\n    new PublicKey(publicAddress),\n    {\n      programId: new PublicKey(TOKEN_PROGRAM),\n    },\n  )\n\n  // Assume that tokens is SPL token with decimals !== 0 and amount !==0\n  // At this point we filter out other SPL tokens, like NFT e.g.\n  const nftAccounts = splAccounts\n    .filter((t) => {\n      const amount = t.account?.data?.parsed?.info?.tokenAmount?.uiAmount\n      const decimals = t.account?.data?.parsed?.info?.tokenAmount?.decimals\n      return decimals !== 0 && amount !== 0\n    })\n    .map((t) => {\n      const address = t.account?.data?.parsed?.info?.mint\n      return address\n    })\n\n  // if user have tons of tokens return first N\n  const accountsSlice = nftAccounts?.slice(0, limit)\n\n  return accountsSlice\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UploadChangeParam } from 'antd/lib/upload/interface'\nimport { toMetaplexFileFromBrowser } from '@metaplex-foundation/js'\n\nimport {\n  Col,\n  Input,\n  Row,\n  Space,\n  Switch,\n  Typography,\n  Image,\n  Upload,\n  Button,\n} from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { AppState } from 'model'\nimport {\n  setCollectionInfo,\n  setCurrentStep,\n  setDisplayedImage,\n  setHasImageLink,\n  setImage,\n  setImageLink,\n  setIsCollection,\n  setName,\n  setSellerFeeBasisPoints,\n} from 'model/nftSetup.controller'\nimport { beforeUpload, fileToBase64 } from 'helper'\nimport { NFTCreatingStep } from 'constant'\n\ntype InformationStepProps = {\n  onCancel: () => void\n}\n\nconst InformationStep = ({ onCancel }: InformationStepProps) => {\n  const name = useSelector((state: AppState) => state.nftSetup.name)\n  const imageLink = useSelector((state: AppState) => state.nftSetup.imageLink)\n  const sellerFeeBasisPoints = useSelector(\n    (state: AppState) => state.nftSetup.sellerFeeBasisPoints,\n  )\n\n  const collectionInfo = useSelector(\n    (state: AppState) => state.nftSetup.collectionInfo,\n  )\n  const isCollection = useSelector(\n    (state: AppState) => state.nftSetup.isCollection,\n  )\n  const displayedImage = useSelector(\n    (state: AppState) => state.nftSetup.displayedImage,\n  )\n  const hasImageLink = useSelector(\n    (state: AppState) => state.nftSetup.hasImageLink,\n  )\n\n  const dispatch = useDispatch()\n\n  const onChangeImage = async (file: UploadChangeParam) => {\n    const { fileList } = file\n    const originFile = fileList[0].originFileObj as File\n    const metaplexImage = await toMetaplexFileFromBrowser(originFile)\n    fileToBase64(originFile, (imgBase64: string | ArrayBuffer | null) => {\n      dispatch(setDisplayedImage(imgBase64))\n      dispatch(setImage(metaplexImage))\n      return\n    })\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n          <Typography.Text type=\"secondary\">NAME</Typography.Text>\n          <Input\n            placeholder=\"Enter name of NFT\"\n            value={name}\n            onChange={(e) => dispatch(setName(e.target.value))}\n          />\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n          <Typography.Text type=\"secondary\">\n            SELLER FEE BASIS POINTS\n          </Typography.Text>\n          <Input\n            type=\"number\"\n            value={sellerFeeBasisPoints}\n            onChange={(e) =>\n              dispatch(setSellerFeeBasisPoints(Number(e.target.value)))\n            }\n          />\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]}>\n          <Col span={24}>\n            <Row>\n              <Col>\n                <Typography.Text type=\"secondary\">IMAGE</Typography.Text>\n              </Col>\n              <Col flex=\"auto\">\n                <Row justify=\"end\" gutter={[6, 6]}>\n                  <Col>\n                    <Typography.Text>Had Image Url?</Typography.Text>{' '}\n                  </Col>\n                  <Col>\n                    <Switch\n                      checked={hasImageLink}\n                      onChange={() => dispatch(setHasImageLink(!hasImageLink))}\n                      size=\"small\"\n                    />\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>\n            {hasImageLink ? (\n              <Input\n                value={imageLink}\n                onChange={(e) => dispatch(setImageLink(e.target.value))}\n              />\n            ) : displayedImage ? (\n              <Row gutter={[8, 8]}>\n                <Col span={24}>\n                  <Image\n                    src={displayedImage.toString() || ''}\n                    preview={false}\n                    width={64}\n                    height={64}\n                    style={{ borderRadius: 8 }}\n                  />\n                </Col>\n                <Col>\n                  <Button\n                    onClick={() => {\n                      dispatch(setImage(''))\n                      dispatch(setDisplayedImage(''))\n                    }}\n                    size=\"small\"\n                  >\n                    Remove Image\n                  </Button>\n                </Col>\n              </Row>\n            ) : (\n              <Upload\n                name=\"avatar\"\n                listType=\"picture-card\"\n                accept=\"image/png,image/jpg,image/webp\"\n                className=\"avatar-uploader\"\n                showUploadList={false}\n                beforeUpload={beforeUpload}\n                onChange={onChangeImage}\n                maxCount={1}\n                onRemove={() => {\n                  setImage('')\n                  return true\n                }}\n              >\n                <IonIcon name=\"add-outline\" />\n              </Upload>\n            )}\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]}>\n          <Col span={24}>\n            <Row>\n              <Col>\n                <Typography.Title level={5}> Collection</Typography.Title>\n              </Col>\n              <Col flex=\"auto\">\n                <Row justify=\"end\" gutter={[6, 6]}>\n                  <Col>\n                    <Typography.Text>New Collection?</Typography.Text>{' '}\n                  </Col>\n                  <Col>\n                    <Switch\n                      checked={isCollection}\n                      onChange={() => dispatch(setIsCollection(!isCollection))}\n                      size=\"small\"\n                    />\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n          {!isCollection && (\n            <Col span={24}>\n              <Row gutter={[12, 12]}>\n                <Col span={24}>\n                  <Space\n                    direction=\"vertical\"\n                    size={8}\n                    style={{ width: '100%' }}\n                  >\n                    <Typography.Text type=\"secondary\">NAME</Typography.Text>\n                    <Input\n                      placeholder=\"Name\"\n                      value={collectionInfo.name}\n                      onChange={(e) =>\n                        dispatch(\n                          setCollectionInfo({\n                            ...collectionInfo,\n                            name: e.target.value,\n                          }),\n                        )\n                      }\n                    />\n                  </Space>\n                </Col>\n                <Col span={24}>\n                  <Space\n                    direction=\"vertical\"\n                    size={8}\n                    style={{ width: '100%' }}\n                  >\n                    <Typography.Text type=\"secondary\">FAMILY</Typography.Text>\n                    <Input\n                      placeholder=\"Family\"\n                      value={collectionInfo.family}\n                      onChange={(e) =>\n                        dispatch(\n                          setCollectionInfo({\n                            ...collectionInfo,\n                            family: e.target.value,\n                          }),\n                        )\n                      }\n                    />\n                  </Space>\n                </Col>\n                <Col span={24}>\n                  <Space\n                    direction=\"vertical\"\n                    size={8}\n                    style={{ width: '100%' }}\n                  >\n                    <Typography.Text type=\"secondary\">\n                      COLLECTION ADDRESS\n                    </Typography.Text>\n                    <Input\n                      placeholder=\"AoqVpXWs4mnXAJp6L....\"\n                      value={collectionInfo.address as any}\n                      onChange={(e) =>\n                        dispatch(\n                          setCollectionInfo({\n                            ...collectionInfo,\n                            address: e.target.value,\n                          }),\n                        )\n                      }\n                    />\n                  </Space>\n                </Col>\n              </Row>\n            </Col>\n          )}\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]}>\n          <Col span={12}>\n            <Button ghost block onClick={onCancel}>\n              Cancel\n            </Button>\n          </Col>\n          <Col span={12}>\n            <Button\n              type=\"primary\"\n              block\n              onClick={() => dispatch(setCurrentStep(NFTCreatingStep.metadata))}\n            >\n              Next\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default InformationStep\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Button, Col, Input, Row, Space, Typography } from 'antd'\n\nimport { AppState } from 'model'\nimport {\n  setCurrentStep,\n  setDescription,\n  setExternalUrl,\n  setSymbol,\n} from 'model/nftSetup.controller'\nimport { NFTCreatingStep } from 'constant'\n\nconst MetadataStep = () => {\n  const symbol = useSelector((state: AppState) => state.nftSetup.symbol)\n  const externalUrl = useSelector(\n    (state: AppState) => state.nftSetup.externalUrl,\n  )\n  const description = useSelector(\n    (state: AppState) => state.nftSetup.description,\n  )\n\n  const dispatch = useDispatch()\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n          <Typography.Text type=\"secondary\">SYMBOL</Typography.Text>\n          <Input\n            placeholder=\"Enter a symbol\"\n            value={symbol}\n            onChange={(e) => dispatch(setSymbol(e.target.value))}\n          />\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n          <Typography.Text type=\"secondary\">EXTERNAL URL</Typography.Text>\n          <Input\n            placeholder=\"Enter link\"\n            value={externalUrl}\n            onChange={(e) => dispatch(setExternalUrl(e.target.value))}\n          />\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n          <Typography.Text type=\"secondary\">DESCRIPTION</Typography.Text>\n          <Input.TextArea\n            placeholder=\"Write a summary\"\n            value={description}\n            onChange={(e) => dispatch(setDescription(e.target.value))}\n            rows={3}\n          />\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]}>\n          <Col span={12}>\n            <Button\n              ghost\n              block\n              onClick={() =>\n                dispatch(setCurrentStep(NFTCreatingStep.information))\n              }\n            >\n              Back\n            </Button>\n          </Col>\n          <Col span={12}>\n            <Button\n              type=\"primary\"\n              block\n              onClick={() =>\n                dispatch(setCurrentStep(NFTCreatingStep.properties))\n              }\n            >\n              Next\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MetadataStep\n","import { PublicKey, Transaction } from '@solana/web3.js'\n\nexport class ConcreteMetaplexAdapter {\n  wallet: WalletInterface\n  publicKey: PublicKey\n  constructor(publicKey: PublicKey, wallet: WalletInterface) {\n    this.publicKey = publicKey\n    this.wallet = wallet\n  }\n\n  static async createPublicKey(wallet: WalletInterface) {\n    const address = await wallet.getAddress()\n    return new ConcreteMetaplexAdapter(new PublicKey(address), wallet)\n  }\n\n  public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    if (this.wallet.signMessage === undefined) {\n      throw new Error('signMessage')\n    }\n\n    const newMessage = new TextDecoder().decode(message)\n    const data = await this.wallet.signMessage(newMessage)\n    return Uint8Array.from(Buffer.from(data.signature, 'hex'))\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    if (this.wallet.signTransaction === undefined) {\n      throw new Error('signTransaction')\n    }\n\n    return this.wallet.signTransaction(transaction)\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    if (this.wallet.signAllTransactions === undefined) {\n      throw new Error('signAllTransactions')\n    }\n\n    return this.wallet.signAllTransactions(transactions)\n  }\n}\n","import {\n  bundlrStorage,\n  CreateNftInput,\n  Metadata,\n  Metaplex,\n  MetaplexFile,\n  NftWithToken,\n  UpdateNftInput,\n  UploadMetadataInput,\n  walletAdapterIdentity,\n} from '@metaplex-foundation/js'\nimport { util } from '@sentre/senhub'\nimport { PublicKey } from '@solana/web3.js'\n\nimport { ConcreteMetaplexAdapter } from './walletMetaplexAdapter'\nimport configs from 'configs'\n\nconst {\n  sol: { connection, bundlrConfig },\n} = configs\n\nclass MetaplexNFT {\n  public static instance: MetaplexNFT\n  private _metaplex: Metaplex\n\n  constructor(metaplex: Metaplex) {\n    this._metaplex = metaplex\n  }\n\n  static async initializeMetaplex() {\n    if (!MetaplexNFT.instance) {\n      const newMetaplex = Metaplex.make(connection)\n        .use(\n          walletAdapterIdentity(\n            await ConcreteMetaplexAdapter.createPublicKey(window.sentre.wallet),\n          ),\n        )\n        .use(bundlrStorage(bundlrConfig!))\n\n      MetaplexNFT.instance = new MetaplexNFT(newMetaplex)\n    }\n    return MetaplexNFT.instance\n  }\n\n  createNFT = async (input: CreateNftInput): Promise<NftWithToken> => {\n    const { nft } = await this._metaplex.nfts().create(input).run()\n    return nft\n  }\n\n  findAllNftsByOwner = async (ownerAddress: string) => {\n    if (!util.isAddress(ownerAddress)) throw new Error('Invalid address!')\n    const arrayNFTs = await this._metaplex\n      .nfts()\n      .findAllByOwner({ owner: this._metaplex.identity().publicKey })\n      .run()\n    return arrayNFTs\n  }\n\n  findByMint = async (nftAddress: PublicKey) => {\n    const nftInfo = await this._metaplex\n      .nfts()\n      .findByMint({ mintAddress: nftAddress })\n      .run()\n    return nftInfo\n  }\n\n  findAllByMintList = async (mintAddresses: PublicKey[]) => {\n    const nftInfo = await this._metaplex\n      .nfts()\n      .findAllByMintList({ mints: mintAddresses })\n      .run()\n    return nftInfo\n  }\n\n  // Get nft information include metadata\n  load = async (metadata: Metadata) => {\n    return await this._metaplex.nfts().load({ metadata }).run()\n  }\n\n  findAllByCreator = async (creator: PublicKey) => {\n    const nftList = await this._metaplex\n      .nfts()\n      .findAllByCreator({ creator })\n      .run()\n    return nftList\n  }\n\n  uploadMetadata = async (data: UploadMetadataInput) => {\n    const { uri } = await this._metaplex.nfts().uploadMetadata(data).run()\n    return uri\n  }\n\n  uploadFile = async (data: MetaplexFile) => {\n    return await this._metaplex.storage().upload(data)\n  }\n\n  update = async (nft: UpdateNftInput) => {\n    return await this._metaplex.nfts().update(nft).run()\n  }\n\n  printNewEdition = async (originalMint: PublicKey) => {\n    const { nft: printedNft } = await this._metaplex\n      .nfts()\n      .printNewEdition({ originalMint })\n      .run()\n    return printedNft\n  }\n\n  getCost = async (file: any) => {\n    const price = (\n      await this._metaplex.storage().getUploadPriceForFile(file)\n    ).basisPoints.toString(10)\n    return price\n  }\n}\n\nexport default MetaplexNFT\n","import { useCallback, useEffect, useState } from 'react'\n\nimport MetaplexNFT from 'lib/metaplex'\n\nexport const useMetaplex = () => {\n  const [nftMachine, setNftMachine] = useState<MetaplexNFT>()\n  const initializeNftMachine = useCallback(async () => {\n    const newNftMachine = await MetaplexNFT.initializeMetaplex()\n    setNftMachine(newNftMachine)\n  }, [])\n\n  useEffect(() => {\n    initializeNftMachine()\n  }, [initializeNftMachine])\n\n  return nftMachine\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Button, Col, Input, Row, Space, Typography } from 'antd'\nimport {\n  setAttributes,\n  setCreators,\n  setCurrentStep,\n  setFiles,\n} from 'model/nftSetup.controller'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { NFTCreatingStep } from 'constant'\nimport { useGenNFT } from 'hooks/actions/useGenNFT'\nimport { AppState } from 'model'\n\nconst Properties = () => {\n  const attributes = useSelector((state: AppState) => state.nftSetup.attributes)\n  const creators = useSelector((state: AppState) => state.nftSetup.creators)\n  const files = useSelector((state: AppState) => state.nftSetup.files)\n  const { genNFT, loading } = useGenNFT()\n\n  const dispatch = useDispatch()\n\n  const onChangeAttributes = (\n    index: number,\n    value: { trait_type?: string; value?: string },\n  ) => {\n    const newAttributes = [...attributes]\n    newAttributes[index] = value\n    return dispatch(setAttributes(newAttributes))\n  }\n\n  const onChangeCreators = (\n    index: number,\n    value: { address: string; share: number },\n  ) => {\n    const newCreators = [...creators]\n    newCreators[index] = value\n    return dispatch(setCreators(newCreators))\n  }\n\n  const onChangeFiles = (\n    index: number,\n    value: { type?: string; uri?: string },\n  ) => {\n    const newFiles = [...files]\n    newFiles[index] = value\n    return dispatch(setFiles(newFiles))\n  }\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Row gutter={[6, 6]}>\n          <Col span={24}>\n            <Typography.Title level={5}>Attribute</Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[12, 12]}>\n              {attributes.map((attribute, idx) => (\n                <Col span={24}>\n                  <Row gutter={[12, 12]}>\n                    <Col span={24}>\n                      <Row>\n                        <Col>\n                          <Typography.Text type=\"secondary\">\n                            #{idx}\n                          </Typography.Text>\n                        </Col>\n                        <Col flex=\"auto\">\n                          <Space\n                            style={{ width: '100%' }}\n                            direction=\"vertical\"\n                            align=\"end\"\n                          >\n                            <Button\n                              size=\"small\"\n                              onClick={() => {\n                                const newAttributes = [...attributes].filter(\n                                  (_, index) => index !== idx,\n                                )\n                                dispatch(setAttributes(newAttributes))\n                              }}\n                            >\n                              <IonIcon name=\"trash-outline\" />\n                            </Button>\n                          </Space>\n                        </Col>\n                      </Row>\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"type\"\n                        value={attribute.trait_type}\n                        onChange={(e) =>\n                          onChangeAttributes(idx, {\n                            ...attribute,\n                            trait_type: e.target.value,\n                          })\n                        }\n                      />\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"value\"\n                        value={attribute.value}\n                        onChange={(e) =>\n                          onChangeAttributes(idx, {\n                            ...attribute,\n                            value: e.target.value,\n                          })\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Button\n              block\n              type=\"dashed\"\n              onClick={() => {\n                const newAttributes = [\n                  ...attributes,\n                  { trait_type: '', value: '' },\n                ]\n                dispatch(setAttributes(newAttributes))\n              }}\n            >\n              <IonIcon name=\"add-outline\" />\n              Add more\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[6, 6]}>\n          <Col span={24}>\n            <Typography.Title level={5}>Creator</Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[12, 12]}>\n              {creators.map((creator, idx) => (\n                <Col span={24}>\n                  <Row gutter={[12, 12]}>\n                    <Col span={24}>\n                      <Row>\n                        <Col>\n                          <Typography.Text type=\"secondary\">\n                            #{idx}\n                          </Typography.Text>\n                        </Col>\n                        <Col flex=\"auto\">\n                          <Space\n                            style={{ width: '100%' }}\n                            direction=\"vertical\"\n                            align=\"end\"\n                          >\n                            <Button\n                              size=\"small\"\n                              onClick={() => {\n                                const newCreators = [...creators].filter(\n                                  (_, index) => index !== idx,\n                                )\n                                dispatch(setCreators(newCreators))\n                              }}\n                            >\n                              <IonIcon name=\"trash-outline\" />\n                            </Button>\n                          </Space>\n                        </Col>\n                      </Row>\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"Enter wallet address\"\n                        value={creator.address}\n                        onChange={(e) => {\n                          onChangeCreators(idx, {\n                            ...creator,\n                            address: e.target.value,\n                          })\n                        }}\n                      />\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"Share\"\n                        value={creator.share}\n                        onChange={(e) =>\n                          onChangeCreators(idx, {\n                            ...creator,\n                            share: Number(e.target.value),\n                          })\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Button\n              block\n              type=\"dashed\"\n              onClick={() => {\n                const newCreators = [...creators, { address: '', share: 0 }]\n                dispatch(setCreators(newCreators))\n              }}\n            >\n              <IonIcon name=\"add-outline\" />\n              Add more\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[6, 6]}>\n          <Col span={24}>\n            <Typography.Title level={5}>File</Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[12, 12]}>\n              {files.map((file, idx) => (\n                <Col span={24}>\n                  <Row gutter={[12, 12]}>\n                    <Col span={24}>\n                      <Row>\n                        <Col>\n                          <Typography.Text type=\"secondary\">\n                            #{idx}\n                          </Typography.Text>\n                        </Col>\n                        <Col flex=\"auto\">\n                          <Space\n                            style={{ width: '100%' }}\n                            direction=\"vertical\"\n                            align=\"end\"\n                          >\n                            <Button\n                              size=\"small\"\n                              onClick={() => {\n                                const newFiles = [...files].filter(\n                                  (_, index) => index !== idx,\n                                )\n                                dispatch(setFiles(newFiles))\n                              }}\n                            >\n                              <IonIcon name=\"trash-outline\" />\n                            </Button>\n                          </Space>\n                        </Col>\n                      </Row>\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"Enter file type\"\n                        value={file.type}\n                        onChange={(e) =>\n                          onChangeFiles(idx, {\n                            ...file,\n                            type: e.target.value,\n                          })\n                        }\n                      />\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"Enter URI of file\"\n                        value={file.uri}\n                        onChange={(e) =>\n                          onChangeFiles(idx, {\n                            ...file,\n                            uri: e.target.value,\n                          })\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Button\n              block\n              type=\"dashed\"\n              onClick={() => {\n                const newFiles = [...files, { type: '', uri: '' }]\n                dispatch(setFiles(newFiles))\n              }}\n            >\n              <IonIcon name=\"add-outline\" />\n              Add more\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24} style={{ marginTop: 16 }}>\n        <Row gutter={[8, 8]}>\n          <Col span={12}>\n            <Button\n              ghost\n              block\n              onClick={() => dispatch(setCurrentStep(NFTCreatingStep.metadata))}\n            >\n              Back\n            </Button>\n          </Col>\n          <Col span={12}>\n            <Button type=\"primary\" block onClick={genNFT} loading={loading}>\n              Generate\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Properties\n","import { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { util } from '@sentre/senhub'\nimport { PublicKey } from '@solana/web3.js'\n\nimport { notifyError, notifySuccess } from 'helper'\nimport { useMetaplex } from '../useMetaplex'\nimport { AppState } from 'model'\n\nexport const useGenNFT = () => {\n  const {\n    name,\n    symbol,\n    description,\n    sellerFeeBasisPoints,\n    image,\n    externalUrl,\n    attributes,\n    collectionInfo,\n    files,\n    creators,\n    isCollection,\n    hasImageLink,\n    imageLink,\n  } = useSelector((state: AppState) => state.nftSetup)\n  const [loading, setLoading] = useState(false)\n  const nftMachine = useMetaplex()\n\n  const genNFT = useCallback(async () => {\n    setLoading(true)\n    try {\n      if (!nftMachine) return\n\n      const creatorAdapt = creators.map((val: any) => {\n        if (util.isAddress(val.address))\n          return notifyError('Please, check your creator address!')\n        return { ...val, address: new PublicKey(val.address) }\n      })\n\n      const uri = await nftMachine.uploadMetadata({\n        name,\n        symbol,\n        description,\n        seller_fee_basis_points: sellerFeeBasisPoints,\n        image: hasImageLink ? imageLink : image,\n        external_url: externalUrl,\n        attributes,\n        collection: {\n          name: collectionInfo.name,\n          family: collectionInfo.family,\n        },\n        properties: {\n          files,\n          creators,\n        },\n      })\n      if (isCollection) {\n        await nftMachine.createNFT({\n          uri,\n          symbol,\n          name,\n          sellerFeeBasisPoints,\n          isCollection,\n          creators: creatorAdapt,\n        })\n\n        return notifySuccess(`Create collection ${name} NFT `, '')\n      }\n      if (!util.isAddress(collectionInfo?.address as string)) {\n        await nftMachine.createNFT({\n          uri,\n          symbol,\n          name,\n          sellerFeeBasisPoints,\n          creators: creatorAdapt,\n        })\n        return notifySuccess(`Create ${name} NFT `, '')\n      }\n\n      await nftMachine.createNFT({\n        uri,\n        symbol,\n        name,\n        sellerFeeBasisPoints,\n        collection: new PublicKey(`${collectionInfo?.address}`),\n      })\n\n      notifySuccess(`Create ${name} NFT`, '')\n    } catch (err) {\n      notifyError(err)\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    attributes,\n    collectionInfo,\n    creators,\n    description,\n    externalUrl,\n    files,\n    hasImageLink,\n    image,\n    imageLink,\n    isCollection,\n    name,\n    nftMachine,\n    sellerFeeBasisPoints,\n    symbol,\n  ])\n\n  return { genNFT, loading }\n}\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Col, Row, Steps } from 'antd'\nimport InformationStep from './infomationStep'\nimport MetadataStep from './metadataStep'\nimport Properties from './properties'\n\nimport { AppState } from 'model'\nimport { NFTCreatingStep } from 'constant'\n\nconst { Step } = Steps\n\ntype NFTContentProps = {\n  onCancel: () => void\n}\n\nconst NFTContent = ({ onCancel }: NFTContentProps) => {\n  const currentStep = useSelector(\n    (state: AppState) => state.nftSetup.currentStep,\n  )\n  const creatingNFTProcess = useMemo(() => {\n    switch (currentStep) {\n      case NFTCreatingStep.information:\n        return <InformationStep onCancel={onCancel} />\n      case NFTCreatingStep.metadata:\n        return <MetadataStep />\n\n      case NFTCreatingStep.properties:\n        return <Properties />\n    }\n  }, [currentStep, onCancel])\n\n  return (\n    <Row gutter={[32, 32]}>\n      <Col span={24}>\n        <Steps size=\"small\" current={currentStep}>\n          <Step title=\"Information\" />\n          <Step title=\"Metadata\" />\n          <Step title=\"Properties\" />\n        </Steps>\n      </Col>\n\n      <Col>{creatingNFTProcess}</Col>\n    </Row>\n  )\n}\n\nexport default NFTContent\n","import React, { useState } from 'react'\n\nimport { Button, Col, Row, Modal, Typography } from 'antd'\nimport NFTContent from './nftContent'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst GenNFT = () => {\n  const [visible, setVisible] = useState(false)\n\n  return (\n    <Row>\n      <Col>\n        <Button onClick={() => setVisible(true)} type=\"primary\">\n          <IonIcon name=\"add-outline\" />\n          <Typography.Text>Generate</Typography.Text>\n        </Button>\n      </Col>\n      <Modal\n        open={visible}\n        destroyOnClose={true}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        closable={false}\n        centered={true}\n      >\n        <NFTContent onCancel={() => setVisible(false)} />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default GenNFT\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { HOME_TAB } from 'constant'\n\n/**\n * Interface & Utility\n */\n\nexport type MainState = {\n  homeTab: string\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: MainState = {\n  homeTab: HOME_TAB.NFT,\n}\n\n/**\n * Actions\n */\n\nexport const setHomeTab = createAsyncThunk(\n  `${NAME}/setHomeTab`,\n  async (homeTab: string) => {\n    return { homeTab }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setHomeTab.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useMemo } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport configs from 'configs'\n\nconst {\n  manifest: { appId },\n} = configs\nconst APP_ROUTE = `/app/${appId}`\n\nexport const useAppRouter = () => {\n  const { search, pathname } = useLocation()\n  const history = useHistory()\n\n  const query = useMemo(() => {\n    return new URLSearchParams(search)\n  }, [search])\n\n  const getQuery = useCallback((queryId: string) => query.get(queryId), [query])\n\n  const getAllQuery = useCallback(<T>() => {\n    const queries: Record<string, string> = {}\n    query.forEach((value, key) => {\n      queries[key] = value\n    })\n    const wrapResult: T = queries as any\n    return wrapResult\n  }, [query])\n\n  /**\n   * @param path is URL parameters\n   * @param newQuery Object all Query\n   * @param force keep prev Query with force=false\n   */\n  const pushHistory = useCallback(\n    (\n      path: string,\n      newQuery: Record<string, string> = {},\n      force: boolean = true,\n    ) => {\n      const currentQuery = getAllQuery<Record<string, string>>()\n      // Keep current query with 'force' === false\n      if (force === false) newQuery = Object.assign(currentQuery, newQuery)\n      const newParams = new URLSearchParams(newQuery)\n      if (newParams) path += `?${newParams.toString()}`\n      history.push(`${APP_ROUTE}${path}`)\n    },\n    [getAllQuery, history],\n  )\n\n  return { getQuery, getAllQuery, pushHistory, appRoute: APP_ROUTE, pathname }\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Col, Row, Segmented } from 'antd'\n\nimport { AppState } from 'model'\nimport { setHomeTab } from 'model/main.controller'\n\nimport { HOME_TAB } from 'constant'\nimport { useAppRouter } from 'hooks/useAppRouter'\n\ntype LayoutProps = { children: any; loading?: boolean }\n\nconst Layout = ({ loading, children }: LayoutProps) => {\n  const homeTab = useSelector((state: AppState) => state.main.homeTab)\n  const dispatch = useDispatch()\n  const { pushHistory } = useAppRouter()\n  return (\n    <Row justify=\"center\" style={{ paddingBottom: 12 }}>\n      <Col lg={12}>\n        <Row gutter={[60, 60]} justify=\"center\">\n          <Col span={24}>\n            <Row justify=\"center\">\n              <Col>\n                <Segmented\n                  options={Object.entries(HOME_TAB).map(([key, val]) => {\n                    return { label: key, value: val }\n                  })}\n                  value={homeTab}\n                  onChange={async (val) => {\n                    dispatch(setHomeTab(val.toString()))\n                    pushHistory(`/${val.toString()}`)\n                  }}\n                  block\n                />\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>{children} </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Layout\n","import { Row, Col, Spin, Typography, Space } from 'antd'\n\nimport './index.less'\n\nconst Loading = () => {\n  return (\n    <div className=\"loading-screen\" style={{ display: 'block' }}>\n      <Row gutter={[24, 24]}>\n        <Col span={24} style={{ height: 256 }} />\n        <Col span={24}>\n          <Row gutter={[24, 24]} justify=\"center\">\n            <Col>\n              <Space direction=\"vertical\" align=\"center\" size={32}>\n                <Spin size=\"large\" />\n                <Typography.Title level={5} style={{ textAlign: 'center' }}>\n                  Welcome to NFT Generator. The application is loading...\n                </Typography.Title>\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Loading\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { util } from '@sentre/senhub'\nimport { NftTokenAccount } from '@nfteyez/sol-rayz-react'\n\nimport { Col, Row, Image, Space, Typography } from 'antd'\n\nimport { fetchMetadata } from 'helper'\nimport { useAppRouter } from 'hooks/useAppRouter'\nimport Dummy from '../static/images/dummy.png'\n\ntype NFTCardProps = {\n  nftInfo: NftTokenAccount\n}\n\nconst NftCard = ({ nftInfo }: NFTCardProps) => {\n  const { pushHistory } = useAppRouter()\n  const [nftThumnail, setNFTThumnail] = useState('')\n\n  const getNFTThumbnail = useCallback(async () => {\n    const data = await fetchMetadata(nftInfo.data.uri)\n    setNFTThumnail(data.image)\n  }, [nftInfo.data.uri])\n\n  useEffect(() => {\n    getNFTThumbnail()\n  }, [getNFTThumbnail])\n\n  return (\n    <Row\n      gutter={[8, 8]}\n      justify=\"center\"\n      onClick={() => pushHistory(`/updateNFT/${nftInfo.mint}`)}\n    >\n      <Col>\n        <Image\n          src={nftThumnail || Dummy}\n          preview={false}\n          style={{ borderRadius: 12, aspectRatio: '1' }}\n        />\n      </Col>\n      <Col span={24}>\n        <Row>\n          <Col>\n            <Typography.Text>{nftInfo?.data?.name}</Typography.Text>\n          </Col>\n          <Col flex={1}>\n            <Space direction=\"vertical\" align=\"end\" style={{ width: '100%' }}>\n              {util.shortenAddress(nftInfo.mint)}\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default NftCard\n","import { useWalletNfts } from '@nfteyez/sol-rayz-react'\nimport { useWalletAddress } from '@sentre/senhub'\n\nimport GenNFT from 'action/genNFT'\nimport { Col, Row, Space, Typography } from 'antd'\nimport Layout from 'component/layout'\nimport Loading from 'component/loading'\nimport NftCard from 'component/nftCard'\n\nimport configs from 'configs'\n\nconst {\n  sol: { connection },\n} = configs\n\nconst NFT = () => {\n  const walletAddress = useWalletAddress()\n  const { nfts, isLoading, error } = useWalletNfts({\n    publicAddress: walletAddress,\n    connection,\n  })\n\n  return (\n    <Layout>\n      <Row justify=\"center\">\n        <Col span={24}>\n          <Row>\n            <Col>\n              <Typography.Title level={2}>Your NFT</Typography.Title>\n            </Col>\n            <Col flex={1}>\n              <Space style={{ width: '100%' }} align=\"end\" direction=\"vertical\">\n                <GenNFT />\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        {error && <Col>Can't load NFT</Col>}\n        <Col span={24}>\n          {isLoading ? (\n            <Loading />\n          ) : (\n            <Row gutter={[24, 24]}>\n              {nfts?.map((nft, index) => (\n                <Col xl={6} sm={8} xs={12} key={index}>\n                  <NftCard nftInfo={nft} />\n                </Col>\n              ))}\n            </Row>\n          )}\n        </Col>\n      </Row>\n    </Layout>\n  )\n}\n\nexport default NFT\n","import { useCallback, useState } from 'react'\nimport { AnchorProvider } from '@project-serum/anchor'\nimport {\n  PROGRAM_ID,\n  DataV2,\n  createCreateMetadataAccountV2Instruction,\n} from '@metaplex-foundation/mpl-token-metadata'\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  createInitializeMintInstruction,\n  createMintToInstruction,\n  getAssociatedTokenAddress,\n  getMinimumBalanceForRentExemptMint,\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token'\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js'\nimport { useWalletAddress } from '@sentre/senhub'\nimport { MetaplexFile } from '@metaplex-foundation/js'\n\nimport { useMetaplex } from '../useMetaplex'\nimport { ConcreteMetaplexAdapter } from 'lib/walletMetaplexAdapter'\nimport { notifyError, notifySuccess } from 'helper'\nimport configs from 'configs'\n\nconst {\n  sol: { connection },\n} = configs\n\ntype GenSplTokenProps = {\n  name: string\n  symbol: string\n  description: string\n  supply: number\n  decimal: number\n  hasMetadataURL: boolean\n  metadataURL: string\n  image: MetaplexFile | string\n  freezeAuthority: boolean\n}\n\nexport const useGenSplToken = () => {\n  const nftMachine = useMetaplex()\n  const [loading, setLoading] = useState(false)\n  const walletAddress = useWalletAddress()\n\n  const genSplToken = useCallback(\n    async ({\n      name,\n      symbol,\n      description,\n      supply,\n      decimal,\n      hasMetadataURL,\n      metadataURL,\n      image,\n      freezeAuthority,\n    }: GenSplTokenProps) => {\n      setLoading(true)\n      try {\n        if (!nftMachine) return\n\n        const walletAdapter = await ConcreteMetaplexAdapter.createPublicKey(\n          window.sentre.wallet,\n        )\n        const provider = new AnchorProvider(connection, walletAdapter, {})\n\n        const mintRent = await getMinimumBalanceForRentExemptMint(connection)\n        const mintAccount = Keypair.generate()\n        let initMint: TransactionInstruction\n        const [metadataPDA] = await PublicKey.findProgramAddress(\n          [\n            Buffer.from('metadata'),\n            PROGRAM_ID.toBuffer(),\n            mintAccount.publicKey.toBuffer(),\n          ],\n          PROGRAM_ID,\n        )\n        let URI: string = metadataURL\n\n        if (!hasMetadataURL && image && typeof image !== 'string') {\n          const uri = await nftMachine.uploadMetadata({\n            name,\n            symbol,\n            description,\n            image,\n          })\n\n          if (uri) {\n            URI = uri\n          }\n        }\n\n        if (URI) {\n          const tokenMetadata: DataV2 = {\n            name,\n            symbol,\n            uri: URI,\n            sellerFeeBasisPoints: 0,\n            creators: null,\n            collection: null,\n            uses: null,\n          }\n\n          const args = {\n            data: tokenMetadata,\n            isMutable: true,\n          }\n\n          const createMintAccountInstruction = SystemProgram.createAccount({\n            fromPubkey: new PublicKey(walletAddress),\n            newAccountPubkey: mintAccount.publicKey,\n            space: MintLayout.span,\n            lamports: mintRent,\n            programId: TOKEN_PROGRAM_ID,\n          })\n\n          if (freezeAuthority) {\n            initMint = createInitializeMintInstruction(\n              mintAccount.publicKey,\n              Number(decimal),\n              new PublicKey(walletAddress),\n              new PublicKey(walletAddress),\n              TOKEN_PROGRAM_ID,\n            )\n          } else {\n            initMint = createInitializeMintInstruction(\n              mintAccount.publicKey,\n              Number(decimal),\n              new PublicKey(walletAddress),\n              null,\n              TOKEN_PROGRAM_ID,\n            )\n          }\n\n          const associatedTokenAccount = await getAssociatedTokenAddress(\n            mintAccount.publicKey,\n            new PublicKey(walletAddress),\n            undefined,\n            TOKEN_PROGRAM_ID,\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n          )\n\n          const createATAInstruction = createAssociatedTokenAccountInstruction(\n            new PublicKey(walletAddress),\n            associatedTokenAccount,\n            new PublicKey(walletAddress),\n            mintAccount.publicKey,\n            TOKEN_PROGRAM_ID,\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n          )\n\n          const mintInstruction = createMintToInstruction(\n            mintAccount.publicKey,\n            associatedTokenAccount,\n            new PublicKey(walletAddress),\n            Number(supply) * 10 ** Number(decimal),\n            undefined,\n            TOKEN_PROGRAM_ID,\n          )\n\n          const MetadataInstruction = createCreateMetadataAccountV2Instruction(\n            {\n              metadata: metadataPDA,\n              mint: mintAccount.publicKey,\n              mintAuthority: new PublicKey(walletAddress),\n              payer: new PublicKey(walletAddress),\n              updateAuthority: new PublicKey(walletAddress),\n            },\n            {\n              createMetadataAccountArgsV2: args,\n            },\n          )\n\n          const createAccountTransaction = new Transaction().add(\n            createMintAccountInstruction,\n            initMint,\n            createATAInstruction,\n            mintInstruction,\n            MetadataInstruction,\n          )\n\n          const createAccountSignature = await provider.sendAndConfirm(\n            createAccountTransaction,\n            [mintAccount],\n          )\n\n          const signature = createAccountSignature.toString()\n\n          notifySuccess('Create token', signature)\n        }\n        return notifyError('Failed to get URI of metadata')\n      } catch (err) {\n        notifyError(err)\n      } finally {\n        setLoading(false)\n      }\n    },\n    [nftMachine, walletAddress],\n  )\n\n  return { genSplToken, loading }\n}\n","import { useState } from 'react'\nimport {\n  MetaplexFile,\n  toMetaplexFileFromBrowser,\n} from '@metaplex-foundation/js'\nimport { UploadChangeParam } from 'antd/lib/upload/interface'\n\nimport {\n  Col,\n  Input,\n  Row,\n  Space,\n  Switch,\n  Typography,\n  Image,\n  Button,\n  Upload,\n} from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { beforeUpload, fileToBase64 } from 'helper'\nimport { useGenSplToken } from 'hooks/actions/useGenSplToken'\n\nconst SPLContent = () => {\n  const [name, setName] = useState('')\n  const [symbol, setSymbol] = useState('')\n  const [supply, setSupply] = useState('')\n  const [decimal, setDecimal] = useState('')\n  const [metadataURL, setMetadataUrl] = useState('')\n  const [displayedImage, setDisplayedImage] = useState<\n    string | ArrayBuffer | null\n  >('')\n  const [freezeAuthority, setFreezeAuthority] = useState(false)\n  const [hasMetadataURL, setHasMetadataURL] = useState(false)\n  const [image, setImage] = useState<MetaplexFile | string>('')\n  const [hasImageURL, setHasImageURL] = useState(false)\n  const [description, setDescription] = useState('')\n  const { genSplToken, loading } = useGenSplToken()\n\n  const onChangeImage = async (file: UploadChangeParam) => {\n    const { fileList } = file\n    const originFile = fileList[0].originFileObj as File\n    const metaplexImage = await toMetaplexFileFromBrowser(originFile)\n    fileToBase64(originFile, (imgBase64: string | ArrayBuffer | null) => {\n      setImage(metaplexImage)\n      setDisplayedImage(imgBase64)\n      return\n    })\n  }\n\n  const onGenerate = async () => {\n    genSplToken({\n      name,\n      symbol,\n      description,\n      supply: Number(supply),\n      decimal: Number(decimal),\n      hasMetadataURL,\n      metadataURL,\n      image,\n      freezeAuthority,\n    })\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col>\n        <Typography.Title level={4}>Token Infos</Typography.Title>\n        <Row gutter={[12, 12]}>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">NAME</Typography.Text>\n              <Input\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"Enter name of token\"\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">SYMBOL</Typography.Text>\n              <Input\n                value={symbol}\n                onChange={(e) => setSymbol(e.target.value)}\n                placeholder=\"Enter symbol\"\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">NUMBER</Typography.Text>\n              <Input\n                value={supply}\n                onChange={(e) => setSupply(e.target.value)}\n                placeholder=\"Enter number of tokens to mint\"\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">DECIMAL</Typography.Text>\n              <Input\n                value={decimal}\n                onChange={(e) => setDecimal(e.target.value)}\n                placeholder=\"Enter decimal\"\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Row>\n                  <Col>\n                    <Typography.Text type=\"secondary\">IMAGE</Typography.Text>\n                  </Col>\n                  <Col flex=\"auto\">\n                    <Row justify=\"end\" gutter={[6, 6]}>\n                      <Col>\n                        <Typography.Text>Had Image Url?</Typography.Text>{' '}\n                      </Col>\n                      <Col>\n                        <Switch\n                          checked={hasImageURL}\n                          onChange={() => setHasImageURL(!hasImageURL)}\n                          size=\"small\"\n                        />\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </Col>\n              <Col span={24}>\n                {hasImageURL && typeof image === 'string' ? (\n                  <Input\n                    value={image}\n                    onChange={(e) => setImage(e.target.value)}\n                  />\n                ) : displayedImage ? (\n                  <Row gutter={[8, 8]}>\n                    <Col span={24}>\n                      <Image\n                        src={displayedImage.toString() || ''}\n                        preview={false}\n                        width={64}\n                        height={64}\n                        style={{ borderRadius: 8 }}\n                      />\n                    </Col>\n                    <Col>\n                      <Button\n                        onClick={() => {\n                          setImage('')\n                          setDisplayedImage('')\n                        }}\n                        size=\"small\"\n                      >\n                        Remove Image\n                      </Button>\n                    </Col>\n                  </Row>\n                ) : (\n                  <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    accept=\"image/png,image/jpg,image/webp\"\n                    className=\"avatar-uploader\"\n                    showUploadList={false}\n                    beforeUpload={beforeUpload}\n                    onChange={onChangeImage}\n                    maxCount={1}\n                    onRemove={() => {\n                      setImage('')\n                      return true\n                    }}\n                  >\n                    <IonIcon name=\"add-outline\" />\n                  </Upload>\n                )}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row>\n          <Col>\n            <Typography.Title level={5}>Metadata</Typography.Title>\n          </Col>\n          <Col flex=\"auto\">\n            <Space style={{ width: '100%' }} direction=\"vertical\" align=\"end\">\n              <Switch\n                checked={hasMetadataURL}\n                onChange={() => setHasMetadataURL(!hasMetadataURL)}\n                size=\"small\"\n              />\n            </Space>\n          </Col>\n        </Row>\n        {hasMetadataURL ? (\n          <Row>\n            <Col span={24}>\n              <Typography.Text>URL</Typography.Text>\n              <Input\n                value={metadataURL}\n                onChange={(e) => {\n                  setMetadataUrl(e.target.value)\n                }}\n              />\n            </Col>\n          </Row>\n        ) : (\n          <Row>\n            <Col span={24}>\n              <Typography.Text type=\"secondary\">DESCRIPTION</Typography.Text>\n              <Input.TextArea\n                placeholder=\"Description of the token/project\"\n                value={description}\n                onChange={(e) => {\n                  setDescription(e.target.value)\n                }}\n                rows={3}\n              />\n            </Col>\n          </Row>\n        )}\n      </Col>\n      <Col span={24}>\n        <Row>\n          <Col>\n            <Typography.Title level={5}> Authority</Typography.Title>\n          </Col>\n          <Col flex=\"auto\">\n            <Space style={{ width: '100%' }} direction=\"vertical\" align=\"end\">\n              <Switch\n                checked={freezeAuthority}\n                onChange={() => setFreezeAuthority(!freezeAuthority)}\n                size=\"small\"\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button block loading={loading} type=\"primary\" onClick={onGenerate}>\n          Generate\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default SPLContent\n","import React, { useState } from 'react'\n\nimport { Button, Col, Row, Modal } from 'antd'\nimport SPLContent from './splContent'\n\nconst GenSPLToken = () => {\n  const [visible, setVisible] = useState(false)\n\n  return (\n    <Row>\n      <Col>\n        <Button onClick={() => setVisible(true)} type=\"primary\">\n          Gen Token\n        </Button>\n      </Col>\n      <Modal\n        open={visible}\n        destroyOnClose={true}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        centered={true}\n      >\n        <SPLContent />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default GenSPLToken\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWalletAddress } from '@sentre/senhub'\n\nimport { getParsedTokensbyUser, notifyError } from 'helper'\n\nexport const useSPLToken = () => {\n  const [loading, setLoading] = useState(false)\n  const [splTokens, setSplToken] = useState<string[]>([])\n\n  const walletAddress = useWalletAddress()\n\n  const getSPLTokens = useCallback(async () => {\n    setLoading(true)\n    try {\n      const newSplTokens = await getParsedTokensbyUser({\n        publicAddress: walletAddress,\n      })\n\n      return setSplToken(newSplTokens)\n    } catch (err) {\n      notifyError(err)\n    } finally {\n      setLoading(false)\n    }\n  }, [walletAddress])\n\n  useEffect(() => {\n    getSPLTokens()\n  }, [getSPLTokens])\n\n  return { splTokens, loading }\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { tokenProvider } from '@sentre/senhub'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { Image } from 'antd'\n\nimport Dummy from '../static/images/dummy.png'\n\ntype IconFTProps = {\n  address: string\n}\nconst IconFT = ({ address }: IconFTProps) => {\n  const [tokenInfo, setTokenInfo] = useState<TokenInfo | undefined>()\n\n  const getTokenInfo = useCallback(async () => {\n    const token = await tokenProvider.findByAddress(address)\n    setTokenInfo(token)\n  }, [address])\n\n  useEffect(() => {\n    getTokenInfo()\n    return () => {\n      setTokenInfo(undefined)\n    }\n  }, [getTokenInfo])\n\n  if (!tokenInfo || !tokenInfo?.logoURI)\n    return (\n      <Image\n        src={Dummy}\n        preview={false}\n        style={{ borderRadius: 12, aspectRatio: '1' }}\n      />\n    )\n\n  return (\n    <Image\n      src={tokenInfo.logoURI}\n      preview={false}\n      style={{ borderRadius: 12, aspectRatio: '1' }}\n    />\n  )\n}\n\nexport default IconFT\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { tokenProvider } from '@sentre/senhub'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { Typography } from 'antd'\n\ntype NameFTProps = {\n  address: string\n}\nconst NameFT = ({ address }: NameFTProps) => {\n  const [tokenInfo, setTokenInfo] = useState<TokenInfo | undefined>()\n\n  const getTokenInfo = useCallback(async () => {\n    const token = await tokenProvider.findByAddress(address)\n    setTokenInfo(token)\n  }, [address])\n\n  useEffect(() => {\n    getTokenInfo()\n  }, [getTokenInfo])\n\n  if (!tokenInfo || !tokenInfo?.name)\n    return <Typography.Text ellipsis>Unknown Token</Typography.Text>\n\n  return <Typography.Text ellipsis>{tokenInfo.name}</Typography.Text>\n}\n\nexport default NameFT\n","import React, { useCallback, useState } from 'react'\nimport { util } from '@sentre/senhub'\nimport { PublicKey } from '@solana/web3.js'\n\nimport { Col, Row, Image, Space, Typography } from 'antd'\nimport IconFT from './iconFT'\nimport NameFT from './nameFT'\n\nimport { useEffect } from 'react'\nimport { useMetaplex } from 'hooks/useMetaplex'\n\ntype NFTCardProps = {\n  address: string\n}\n\nconst SPLCard = ({ address }: NFTCardProps) => {\n  const [splThumnail, setSPLThumnail] = useState('')\n  const [name, setName] = useState('')\n  const metaplex = useMetaplex()\n\n  const getTokenInfo = useCallback(async () => {\n    try {\n      if (!metaplex) return\n      const nft = await metaplex.findByMint(new PublicKey(address))\n      const logo = nft?.json?.image\n      const newName = nft?.json?.name\n\n      if (logo !== undefined) {\n        setSPLThumnail(logo)\n      }\n      if (newName !== undefined) {\n        setName(newName)\n      }\n    } catch (error) {\n      const err = (error as any)?.message\n      // the token is not an nft if there is no metadata account associated\n      if (\n        err.includes(\n          'No Metadata account could be found for the provided mint address',\n        )\n      ) {\n        setSPLThumnail('')\n      }\n    }\n  }, [address, metaplex])\n\n  useEffect(() => {\n    getTokenInfo()\n    return () => {\n      setSPLThumnail('')\n      setName('')\n    }\n  }, [getTokenInfo])\n\n  return (\n    <Row gutter={[8, 8]} justify=\"center\">\n      <Col>\n        {splThumnail ? (\n          <Image\n            src={splThumnail}\n            preview={false}\n            style={{ borderRadius: 12, aspectRatio: '1' }}\n          />\n        ) : (\n          <IconFT address={address} />\n        )}\n      </Col>\n      <Col span={24}>\n        <Row wrap={false}>\n          <Col span={8}>\n            {name ? (\n              <Typography.Text ellipsis>{name}</Typography.Text>\n            ) : (\n              <NameFT address={address} />\n            )}\n          </Col>\n          <Col flex={1}>\n            <Space direction=\"vertical\" align=\"end\" style={{ width: '100%' }}>\n              {util.shortenAddress(address)}\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default SPLCard\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Col, Row, Space, Typography } from 'antd'\nimport Layout from 'component/layout'\nimport GenSPLToken from 'action/genSPLToken'\n\nimport { setHomeTab } from 'model/main.controller'\nimport { HOME_TAB } from 'constant'\nimport { useSPLToken } from 'hooks/useSPLToken'\nimport SPLCard from 'component/splCard'\n\nconst SPLToken = () => {\n  const { splTokens } = useSPLToken()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setHomeTab(HOME_TAB.TOKEN))\n    return () => {}\n  }, [dispatch])\n\n  return (\n    <Layout>\n      <Row justify=\"center\">\n        <Col span={24}>\n          <Row>\n            <Col>\n              <Typography.Title level={2}>Your Token</Typography.Title>\n            </Col>\n            <Col flex={1}>\n              <Space style={{ width: '100%' }} direction=\"vertical\" align=\"end\">\n                <GenSPLToken />\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[24, 24]}>\n            {splTokens.map((address, index) => (\n              <Col span={8} key={index}>\n                <SPLCard address={address} />\n              </Col>\n            ))}\n          </Row>\n        </Col>\n      </Row>\n    </Layout>\n  )\n}\n\nexport default SPLToken\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { PublicKey } from '@solana/web3.js'\nimport { JsonMetadata } from '@metaplex-foundation/js'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Button, Col, Row, Typography, Image, Space, Input } from 'antd'\n\nimport Dummy from '../../static/images/dummy.png'\nimport { useMetaplex } from 'hooks/useMetaplex'\nimport { useAppRouter } from 'hooks/useAppRouter'\nimport { notifyError, notifySuccess } from 'helper'\n\nconst UpdateNFT = () => {\n  const [loading, setLoading] = useState(false)\n  const [metadata, setMetadata] = useState<JsonMetadata<string>>({})\n  const [nftInfo, setNftInfo] = useState<any>()\n  const params = useParams<{ address: string }>()\n  const nftMachine = useMetaplex()\n  const { pushHistory } = useAppRouter()\n\n  const getNFTInfo = useCallback(async () => {\n    const nft = await nftMachine?.findByMint(new PublicKey(params.address))\n    setNftInfo(nft)\n    if (nft?.json) setMetadata({ ...nft?.json })\n  }, [nftMachine, params.address])\n\n  useEffect(() => {\n    if (!params || !params.address) {\n      pushHistory('/nft')\n    }\n    getNFTInfo()\n  }, [params, pushHistory, getNFTInfo])\n\n  const onChangeAttributes = (\n    index: number,\n    value: { trait_type?: string; value?: string },\n  ) => {\n    const newAttributes = [...(metadata.attributes || [])]\n    newAttributes[index] = value\n    return setMetadata({ ...metadata, attributes: newAttributes })\n  }\n\n  const onUpdateMetadata = async () => {\n    try {\n      setLoading(true)\n      if (!nftMachine || !nftInfo) return\n      // Define a variables for on-chain Metadata\n      const onChainMetadata: any = {}\n      // const newFiles: any[] = {}\n      onChainMetadata.nftOrSft = nftInfo\n      onChainMetadata.name = metadata.name || ''\n      onChainMetadata.symbol = metadata.symbol || ''\n      onChainMetadata.description = metadata.description || ''\n      onChainMetadata.seller_fee_basis_points =\n        metadata.seller_fee_basis_points || ''\n      onChainMetadata.external_url = metadata.external_url || ''\n\n      const newUri = await nftMachine.uploadMetadata(metadata)\n      if (newUri) {\n        console.log(newUri)\n        onChainMetadata.uri = newUri\n      }\n\n      const { response } = await nftMachine.update(onChainMetadata)\n      getNFTInfo()\n      notifySuccess('Update metadata', response.signature)\n    } catch (err) {\n      notifyError(err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!nftInfo)\n    return (\n      <Row justify=\"center\">\n        <Col>\n          <Typography.Text>\n            Opps, can't fetch NFT,{' '}\n            <Button\n              onClick={() => {\n                pushHistory('/nft')\n              }}\n            >\n              Click Here\n            </Button>{' '}\n            to come back\n          </Typography.Text>\n        </Col>\n      </Row>\n    )\n  return (\n    <Row justify=\"center\" gutter={[24, 24]} style={{ marginBottom: 24 }}>\n      <Col span={24}>\n        <Space style={{ width: '100%' }} direction=\"vertical\" align=\"center\">\n          <Typography.Title level={2}>\n            Update the metadata of your NFT\n          </Typography.Title>\n        </Space>\n      </Col>\n      <Col lg={16}>\n        <Row gutter={[12, 12]} justify=\"center\">\n          <Col span={24}>\n            <Space\n              style={{ width: '100%' }}\n              direction=\"vertical\"\n              align=\"center\"\n            >\n              <Typography.Title level={3}>You want to Update</Typography.Title>\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[12, 12]}>\n              <Col span={10}>\n                <Space direction=\"vertical\" size={12}>\n                  <Image\n                    src={nftInfo?.json?.image || Dummy}\n                    preview={false}\n                    style={{ borderRadius: 12, aspectRatio: '1' }}\n                  />\n                  <Typography.Text>\n                    {nftInfo?.json?.name || 'Unknown NFT'}\n                  </Typography.Text>\n                </Space>\n              </Col>\n              <Col flex={1}>\n                <Typography.Title level={5}>Description</Typography.Title>\n                <Typography.Text>{nftInfo?.json?.description}</Typography.Text>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col lg={16}>\n        <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\n          <Typography.Title level={3}>\n            Fill in the inputs you want to update\n          </Typography.Title>\n        </Space>\n        <Row gutter={[12, 12]}>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">NAME</Typography.Text>\n              <Input\n                placeholder=\"Enter name of NFT\"\n                value={metadata?.name || ''}\n                onChange={(e) =>\n                  setMetadata({ ...metadata, name: e.target.value })\n                }\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">SYMBOL</Typography.Text>\n              <Input\n                placeholder=\"Enter symbol of NFT\"\n                value={metadata?.symbol || ''}\n                onChange={(e) =>\n                  setMetadata({ ...metadata, symbol: e.target.value })\n                }\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">DESCRIPTION</Typography.Text>\n              <Input\n                placeholder=\"Enter description of NFT\"\n                value={metadata?.description || ''}\n                onChange={(e) =>\n                  setMetadata({ ...metadata, description: e.target.value })\n                }\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">ROYALTIES</Typography.Text>\n              <Input\n                placeholder=\"Enter royalties of NFT\"\n                value={metadata?.seller_fee_basis_points || ''}\n                onChange={(e) =>\n                  setMetadata({\n                    ...metadata,\n                    seller_fee_basis_points: Number(e.target.value),\n                  })\n                }\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">IMAGE URI</Typography.Text>\n              <Input\n                placeholder=\"Enter image of NFT\"\n                value={metadata?.image || ''}\n                onChange={(e) =>\n                  setMetadata({ ...metadata, image: e.target.value })\n                }\n              />\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\n              <Typography.Text type=\"secondary\">EXTERNAL URL</Typography.Text>\n              <Input\n                placeholder=\"Enter an external url of NFT\"\n                value={metadata?.external_url || ''}\n                onChange={(e) =>\n                  setMetadata({ ...metadata, external_url: e.target.value })\n                }\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col lg={16}>\n        <Row justify=\"center\">\n          <Col span={24}>\n            <Space\n              direction=\"vertical\"\n              size={8}\n              style={{ width: '100%' }}\n              align=\"center\"\n            >\n              <Typography.Title level={4}>Attributes</Typography.Title>\n            </Space>\n          </Col>\n          <Col span={24}>\n            <Space\n              direction=\"vertical\"\n              size={8}\n              style={{ width: '100%' }}\n              align=\"center\"\n            >\n              <Typography.Title level={5}>\n                Attributes defining the characteristics of the asset\n              </Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n\n        <Row gutter={[6, 6]}>\n          <Col span={24}>\n            <Row gutter={[12, 12]}>\n              {metadata?.attributes?.map((attribute, idx) => (\n                <Col span={24} key={idx}>\n                  <Row gutter={[12, 12]}>\n                    <Col span={24}>\n                      <Row>\n                        <Col>\n                          <Typography.Text type=\"secondary\">\n                            #{idx}\n                          </Typography.Text>\n                        </Col>\n                        <Col flex=\"auto\">\n                          <Space\n                            style={{ width: '100%' }}\n                            direction=\"vertical\"\n                            align=\"end\"\n                          >\n                            <Button\n                              size=\"small\"\n                              onClick={() => {\n                                const newAttributes = [\n                                  ...(metadata?.attributes || []),\n                                ].filter((_, index) => index !== idx)\n                                setMetadata({\n                                  ...metadata,\n                                  attributes: newAttributes,\n                                })\n                              }}\n                            >\n                              <IonIcon name=\"trash-outline\" />\n                            </Button>\n                          </Space>\n                        </Col>\n                      </Row>\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"Enter trait type\"\n                        value={attribute.trait_type || ''}\n                        onChange={(e) =>\n                          onChangeAttributes(idx, {\n                            ...attribute,\n                            trait_type: e.target.value,\n                          })\n                        }\n                      />\n                    </Col>\n                    <Col span={12}>\n                      <Input\n                        placeholder=\"Enter URI of file\"\n                        value={attribute.value}\n                        onChange={(e) =>\n                          onChangeAttributes(idx, {\n                            ...attribute,\n                            value: e.target.value,\n                          })\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Button\n              block\n              type=\"dashed\"\n              onClick={() => {\n                const newAttributes = [\n                  ...(metadata?.attributes || []),\n                  { trait_type: '', value: '' },\n                ]\n\n                setMetadata({ ...metadata, attributes: newAttributes })\n              }}\n            >\n              <IonIcon name=\"add-outline\" />\n              Add more\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Col lg={16}>\n        <Button\n          block\n          type=\"primary\"\n          onClick={onUpdateMetadata}\n          loading={loading}\n        >\n          Update\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default UpdateNFT\n","import { Redirect, Route, Switch } from 'react-router-dom'\n\nimport { Row, Col } from 'antd'\nimport NFT from './nft'\nimport SPLToken from './splToken'\nimport UpdateNFT from './nft/updateNFT'\n\nimport { useAppRouter } from 'hooks/useAppRouter'\n\nimport './index.less'\n\nconst View = () => {\n  const { appRoute } = useAppRouter()\n\n  return (\n    <Row gutter={[24, 24]} align=\"middle\" justify=\"center\">\n      <Col span={24}>\n        <Switch>\n          <Route path={`${appRoute}/nft`} component={NFT} />\n          <Route path={`${appRoute}/token`} component={SPLToken} />\n          <Route\n            path={`${appRoute}/updateNFT/:address`}\n            component={UpdateNFT}\n          />\n          <Route path=\"*\">\n            <Redirect to={`${appRoute}/nft`} />\n          </Route>\n        </Switch>\n      </Col>\n    </Row>\n  )\n}\n\nexport default View\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    Buffer.isBuffer(val)\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { FindNftsByCreatorOutput } from '@metaplex-foundation/js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Store constructor\n */\n\nconst NAME = 'nfts'\nconst initialState: FindNftsByCreatorOutput = []\n\n/**\n * Actions\n */\n\nexport const initNFTs = createAsyncThunk(\n  `${NAME}/initNFTs`,\n  async (bulk: FindNftsByCreatorOutput) => {\n    return bulk\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(initNFTs.fulfilled, (state, { payload }) => payload),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Store constructor\n */\n\nconst NAME = 'spls'\nconst initialState: string[] = []\n\n/**\n * Actions\n */\n\nexport const initSPLs = createAsyncThunk(\n  `${NAME}/initSPLs`,\n  async (bulk: string[]) => {\n    return bulk\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(initSPLs.fulfilled, (state, { payload }) => payload),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'model/devTools'\n\nimport main from 'model/main.controller'\nimport nftSetup from 'model/nftSetup.controller'\nimport nfts from 'model/nfts.controller'\nimport spl from 'model/spl.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n    nftSetup,\n    nfts,\n    spl,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport { AntdProvider } from '@sentre/senhub'\n\nimport './static/styles/light.less'\nimport './static/styles/dark.less'\n\nimport View from 'view'\n\nimport model from 'model'\nimport configs from 'configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <AntdProvider appId={appId} prefixCls={appId}>\n      <Provider store={model}>\n        <View />\n      </Provider>\n    </AntdProvider>\n  )\n}\n\nexport * from 'static.app'\n"],"names":["Object","defineProperty","exports","value","enumerable","get","_logo","default","_README","_panel","_interopRequireDefault","require","obj","__esModule","panels","NAME","setCurrentStep","createAsyncThunk","async","currentStep","setName","name","setSellerFeeBasisPoints","sellerFeeBasisPoints","setImage","image","setCollectionInfo","collectionInfo","setIsCollection","isCollection","setSymbol","symbol","setExternalUrl","externalUrl","setDescription","description","setAttributes","attributes","setCreators","creators","setFiles","files","setDisplayedImage","displayedImage","setHasImageLink","hasImageLink","setImageLink","imageLink","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","assign","shared","appId","process","url","development","production","devnet","node","connection","Connection","rpc","bundlrConfig","address","providerUrl","timeout","testnet","mainnet","manifest","env","sol","net","HOME_TAB","NFT","TOKEN","PublicKey","NFTCreatingStep","FileType","configs","notifySuccess","content","txId","window","notify","type","onClick","open","util","notifyError","er","console","log","message","fileToBase64","file","callBack","reader","FileReader","readAsDataURL","onload","result","beforeUpload","isJpgOrPng","isLt2M","size","onCancel","useSelector","nftSetup","dispatch","useDispatch","Row","gutter","Col","span","Space","direction","style","width","Typography","Input","placeholder","onChange","e","target","Number","flex","justify","Switch","checked","Image","src","toString","preview","height","borderRadius","Button","Upload","listType","accept","className","showUploadList","fileList","originFile","originFileObj","metaplexImage","toMetaplexFileFromBrowser","imgBase64","maxCount","onRemove","level","family","ghost","block","metadata","rows","information","properties","ConcreteMetaplexAdapter","constructor","publicKey","wallet","this","getAddress","undefined","signMessage","Error","newMessage","TextDecoder","decode","data","Uint8Array","from","Buffer","signature","transaction","signTransaction","transactions","signAllTransactions","MetaplexNFT","metaplex","_metaplex","createNFT","nft","nfts","create","input","run","findAllNftsByOwner","ownerAddress","findAllByOwner","owner","identity","findByMint","mintAddress","nftAddress","findAllByMintList","mints","mintAddresses","load","findAllByCreator","creator","uploadMetadata","uri","uploadFile","storage","upload","update","printNewEdition","printedNft","originalMint","getCost","getUploadPriceForFile","basisPoints","instance","newMetaplex","Metaplex","use","walletAdapterIdentity","createPublicKey","sentre","bundlrStorage","useMetaplex","nftMachine","setNftMachine","useState","initializeNftMachine","useCallback","newNftMachine","useEffect","genNFT","loading","setLoading","creatorAdapt","map","val","seller_fee_basis_points","external_url","collection","err","useGenNFT","onChangeAttributes","index","newAttributes","onChangeCreators","newCreators","onChangeFiles","newFiles","attribute","idx","align","filter","_","trait_type","share","marginTop","Step","Steps","creatingNFTProcess","useMemo","current","title","visible","setVisible","Modal","destroyOnClose","footer","closable","centered","homeTab","setHomeTab","APP_ROUTE","useAppRouter","search","pathname","useLocation","history","useHistory","query","URLSearchParams","getQuery","queryId","getAllQuery","queries","forEach","key","pushHistory","path","newQuery","force","currentQuery","newParams","push","appRoute","children","main","paddingBottom","lg","Segmented","options","entries","label","display","Spin","textAlign","nftInfo","nftThumnail","setNFTThumnail","getNFTThumbnail","DataLoader","fetch","then","json","fetchMetadata","mint","Dummy","aspectRatio","walletAddress","useWalletAddress","isLoading","error","useWalletNfts","publicAddress","xl","sm","xs","supply","setSupply","decimal","setDecimal","metadataURL","setMetadataUrl","freezeAuthority","setFreezeAuthority","hasMetadataURL","setHasMetadataURL","hasImageURL","setHasImageURL","genSplToken","walletAdapter","provider","AnchorProvider","mintRent","getMinimumBalanceForRentExemptMint","mintAccount","Keypair","initMint","metadataPDA","PROGRAM_ID","toBuffer","URI","args","uses","isMutable","createMintAccountInstruction","SystemProgram","fromPubkey","newAccountPubkey","space","MintLayout","lamports","programId","TOKEN_PROGRAM_ID","createInitializeMintInstruction","associatedTokenAccount","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","createATAInstruction","createAssociatedTokenAccountInstruction","mintInstruction","createMintToInstruction","MetadataInstruction","createCreateMetadataAccountV2Instruction","mintAuthority","payer","updateAuthority","createMetadataAccountArgsV2","createAccountTransaction","Transaction","add","sendAndConfirm","useGenSplToken","useSPLToken","splTokens","setSplToken","getSPLTokens","newSplTokens","limit","splAccounts","getParsedTokenAccountsByOwner","nftAccounts","t","amount","account","parsed","info","tokenAmount","uiAmount","decimals","slice","getParsedTokensbyUser","tokenInfo","setTokenInfo","getTokenInfo","token","tokenProvider","logoURI","ellipsis","splThumnail","setSPLThumnail","logo","newName","includes","wrap","setMetadata","setNftInfo","params","useParams","getNFTInfo","marginBottom","onChainMetadata","nftOrSft","newUri","response","Route","component","SPLToken","UpdateNFT","Redirect","to","BigInt","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","Array","isArray","proto","getPrototypeOf","isPlainObject","BN","isBuffer","initNFTs","bulk","initSPLs","configureStore","middleware","getDefaultMiddleware","devTools","reducer","spl","Page","AntdProvider","prefixCls","Provider","store","model"],"sourceRoot":""}